{"version":3,"sources":["../../server/test/test.js"],"names":["chaiHttp","version","baseUrl","describe","it","done","app","get","send","end","err","res","status","to","eql","post","firstName","lastName","email","password","patch","oldpassword","newpassword","repaid","user","amount","tenor","id"],"mappings":"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","sourcesContent":["/* eslint-disable object-curly-newline */\r\nimport { use, request, expect } from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../app';\r\nuse(chaiHttp);\r\n\r\nconst version = 'v1';\r\nconst baseUrl = `/api/${version}`;\r\n// index request page\r\ndescribe(`GET ${baseUrl}/`, () => {\r\n  it('should be able to return welcome message', (done) => {\r\n    request(app)\r\n      .get(`${baseUrl}/`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// successfull test register new user\r\ndescribe(`POST ${baseUrl}/auth/signup`, () => {\r\n  it('should be able to create a new user', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/auth/signup`)\r\n      .send({ firstName: 'Benon', lastName: 'Niyo', email: 'niyobenon@quickcredit.com', password: 'niyo$123' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test with already existing user email\r\ndescribe(`POST ${baseUrl}/auth/signup`, () => {\r\n  it('should return email already exist to other account', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/auth/signup`)\r\n      .send({ firstName: 'Roger', lastName: 'Manzi', email: 'manziroger@quickcredit.com', password: 'abc@123' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test with undefined parameters\r\ndescribe(`POST ${baseUrl}/auth/signup`, () => {\r\n  it('should return status of 400 due to undefined parameters', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/auth/signup`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(400);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test with some missing parameters\r\ndescribe(`POST ${baseUrl}/auth/signin`, () => {\r\n  it('should return 400 error bad request some missing parameters', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/auth/signin`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(400);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test invalid user login credential\r\ndescribe(`POST ${baseUrl}/auth/signin`, () => {\r\n  it('should return no data found wrong username or password', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/auth/signin`)\r\n      .send({ email: 'manziroger@gmail.com', password: 'abc@123' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test with unverfiied user login credential\r\ndescribe(`POST ${baseUrl}/auth/signin`, () => {\r\n  it('should return account not yet verified', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/auth/signin`)\r\n      .send({ email: 'manziroger@quickcredit.com', password: 'abc@123' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test with noo-exist email user\r\ndescribe(`PATCH ${baseUrl}/users/<email>/verify`, () => {\r\n  it('should return no data related to email', (done) => {\r\n    request(app)\r\n      .patch(`${baseUrl}/users/manziroger@gmail.com/verify`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test reset before user verified\r\ndescribe(`PATCH ${baseUrl}/users/<token>/reset`, () => {\r\n  it('should  return account not yet verified', (done) => {\r\n    request(app)\r\n      .patch(`${baseUrl}/users/aXRl6xJRf/reset`)\r\n      .send({ oldpassword: 'abc@123', newpassword: '123@abc' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n\r\n// test with valid token it will verify user\r\ndescribe(`PATCH ${baseUrl}/users/<token>/verify`, () => {\r\n  it('should verify user', (done) => {\r\n    request(app)\r\n      .patch(`${baseUrl}/users/aXRl6xJRf/verify`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test with verified user login credential\r\ndescribe(`POST ${baseUrl}/auth/signin`, () => {\r\n  it('should return logged user information', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/auth/signin`)\r\n      .send({ email: 'manziroger@quickcredit.com', password: 'abc@123' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test reset password with invalid token fail\r\ndescribe(`PATCH ${baseUrl}/users/<token>/reset`, () => {\r\n  it('should  reset user password', (done) => {\r\n    request(app)\r\n      .patch(`${baseUrl}/users/aXRl6xJRfs/reset`)\r\n      .send({ oldpassword: 'abc@123', newpassword: '123@abc' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test with missing parameters\r\ndescribe(`PATCH ${baseUrl}/users/<token>/reset`, () => {\r\n  it('should  return 400 error code', (done) => {\r\n    request(app)\r\n      .patch(`${baseUrl}/users/aXRl6xJRf/reset`)\r\n      .send({ newpassword: '123@abc' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(400);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test reset password successful pass\r\ndescribe(`PATCH ${baseUrl}/users/<token>/reset`, () => {\r\n  it('should  reset user password', (done) => {\r\n    request(app)\r\n      .patch(`${baseUrl}/users/aXRl6xJRf/reset`)\r\n      .send({ oldpassword: 'abc@123', newpassword: '123@abc' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// End users account tests\r\ndescribe(`GET ${baseUrl}/loans`, () => {\r\n  it('should of loan by status and repayment application', (done) => {\r\n    request(app)\r\n      .get(`${baseUrl}/loans`)\r\n      .send({ status: 'pending', repaid: true })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\ndescribe(`GET ${baseUrl}/loans`, () => {\r\n  it('should no data ', (done) => {\r\n    request(app)\r\n      .get(`${baseUrl}/loans`)\r\n      .send({ status: 'rejected', repaid: true })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\ndescribe(`GET ${baseUrl}/loans/<id>`, () => {\r\n  it('should return loan by with id specified', (done) => {\r\n    request(app)\r\n      .get(`${baseUrl}/loans/1`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\ndescribe(`GET ${baseUrl}/loans`, () => {\r\n  it('should list all pending loan application', (done) => {\r\n    request(app)\r\n      .get(`${baseUrl}/loans`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\ndescribe(`GET ${baseUrl}/loans/<id>/repayments`, () => {\r\n  it('should return repayment history', (done) => {\r\n    request(app)\r\n      .get(`${baseUrl}/loans/1/repayments`)\r\n      .send()\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n// test loan applications\r\ndescribe(`POST ${baseUrl}/loans`, () => {\r\n  it('should create loan application', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/loans`)\r\n      .send({ user: 'aXRl6xJRf', amount: '1200.0', tenor: '8' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\ndescribe(`POST ${baseUrl}/loans`, () => {\r\n  it('should create loan application', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/loans`)\r\n      .send({ user: 'aXRl6xJRf', amount: '1200.0', tenor: '8' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\ndescribe(`PATCH ${baseUrl}/loans/<id>`, () => {\r\n  it('should approve or reject loan application', (done) => {\r\n    request(app)\r\n      .patch(`${baseUrl}/loans/1`)\r\n      .send({ status: 'approved' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\ndescribe(`POST ${baseUrl}/loans/<id>/repayment`, () => {\r\n  it('should repay loan', (done) => {\r\n    request(app)\r\n      .post(`${baseUrl}/loans/1/repayment`)\r\n      .send({ id: 1, amount: '210' })\r\n      .end((err, res) => {\r\n      // Expect status to Ok!\r\n        expect(res.status).to.eql(200);\r\n        done(err);\r\n      });\r\n  });\r\n});\r\n"],"file":"test.js"}