{"version":3,"sources":["../../server/controllers/Repayments.js"],"names":["loadRepayment","req","res","repayParam","params","response","id","undefined","status","data","message","quickcredit","repayments","find","transaction","parseInt","loanId","json","repaymentById","repayInfo","body","repaymentInfo","repay","repayment","repayid","length","amount","loanInfo","loans","loan","loanIndex","findIndex","parseFloat","paymentInstallment","nwBalance","balance","oldBalance","newBalance","createdOn","Date","push","repaid","interest","monthlyInstallement","paidAmount"],"mappings":"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","sourcesContent":["import quickcredit from '../models/database';\r\n\r\nexport const loadRepayment = (req, res) => {\r\n  const repayParam = req.params;\r\n  let response = null;\r\n  if (repayParam.id === undefined) {\r\n    response = {\r\n      status: 400,\r\n      data: {\r\n        message: 'bad request, there might be some missing parameters',\r\n      },\r\n    };\r\n  } else {\r\n    response = {\r\n      status: 200,\r\n      data: quickcredit.repayments.find(transaction => parseInt(transaction.loanId) === parseInt(repayParam.id)),\r\n    };\r\n  }\r\n  res.json(response);\r\n};\r\nexport const repaymentById = (req, res) => {\r\n  const repayInfo = quickcredit.body;\r\n  const repaymentInfo = quickcredit.repayments.find(transaction => transaction.id === repayInfo.id);\r\n  res.json(repaymentInfo);\r\n};\r\nexport const repay = (req, res) => {\r\n  const repayment = req.params;\r\n  let response = null;\r\n  // increment repayment id for the next repayment\r\n  repayment.repayid = quickcredit.repayments.length + 1;\r\n  if (repayment.id === undefined) {\r\n    response = {\r\n      status: 400,\r\n      data: {\r\n        message: 'bad request, loan id must defined',\r\n      },\r\n    };\r\n  } else if (req.body.amount === undefined) {\r\n    response = {\r\n      status: 400,\r\n      data: {\r\n        message: 'bad request,repayment amount must defined',\r\n      },\r\n    };\r\n  } else {\r\n  // get loan information and index based on loan id passed\r\n    const loanInfo = quickcredit.loans.find(loan => loan.id === parseInt(repayment.id));\r\n    const loanIndex = quickcredit.loans.findIndex(loan => loan.id === parseInt(repayment.id));\r\n    if (loanIndex === -1) {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: 'loan specified not exist',\r\n        },\r\n      };\r\n    } else if (loanInfo.status === 'pending') {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: 'sorry loan application not yet approved',\r\n        },\r\n      };\r\n    } else if (parseFloat(loanInfo.paymentInstallment) !== parseFloat(repayment.amount)) {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: `amount paid does not match to installement payment paid ${repayment.amount} installement payment must be ${loanInfo.paymentInstallment}`,\r\n        },\r\n      };\r\n    } else {\r\n      // set up repayment parameters to be pushed int repayments array entity\r\n      const nwBalance = parseFloat(loanInfo.balance) - parseFloat(repayment.amount);\r\n      const repayInfo = {\r\n        id: repayment.repayid,\r\n        loanId: parseInt(repayment.id),\r\n        amount: repayment.amount,\r\n        oldBalance: parseFloat(loanInfo.balance),\r\n        newBalance: nwBalance,\r\n        createdOn: new Date(),\r\n      };\r\n      // pushing repayment transaction into entity\r\n      quickcredit.repayments.push(repayInfo);\r\n      // update loan as repayment done\r\n      quickcredit.loans[loanIndex].balance = nwBalance;\r\n      // check new balance become  zero change loan statu to repaid\r\n      if (nwBalance === 0) {\r\n        quickcredit.loans[loanIndex].repaid = true;\r\n      }\r\n      // response generate\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          id: repayment.repayid,\r\n          loanId: repayment.id,\r\n          amount: loanInfo.amount,\r\n          createdOn: loanInfo.createdOn,\r\n          interest: loanInfo.interest,\r\n          monthlyInstallement: loanInfo.paymentInstallment,\r\n          paidAmount: repayment.amount,\r\n          balance: loanInfo.balance,\r\n        },\r\n      };\r\n    }\r\n  }\r\n  res.status(response.status).json(response);\r\n};\r\n"],"file":"Repayments.js"}