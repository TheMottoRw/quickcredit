{"version":3,"sources":["../../server/controllers/Users.js"],"names":["loadUser","req","res","send","quickcredit","users","createUser","user","body","response","firstName","lastName","email","password","status","data","error","message","id","length","token","createdOn","Date","isAdmin","push","json","login","credentials","undefined","userInfo","find","address","toggleVerification","userEmail","params","userIndex","findIndex","resetPassword","userParams","oldpassword","newpassword"],"mappings":"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","sourcesContent":["\r\n// import nodemailer from 'nodemailer';\r\nimport quickcredit from '../models/database';\r\nimport { isEmailExist, generateToken } from '../helpers/userAccount';\r\n\r\nexport const loadUser = (req, res) => {\r\n  res.send(quickcredit.users);\r\n};\r\n\r\nexport const createUser = (req, res) => {\r\n  const user = req.body;\r\n  let response = {};\r\n  if (!user.firstName || !user.lastName || !user.email || !user.password) {\r\n    response = {\r\n      status: 400,\r\n      data: {\r\n        error: 'Bad request,all information are required',\r\n      },\r\n    };\r\n  } else if (isEmailExist(user.email)) {\r\n    response = {\r\n      status: 200,\r\n      data: {\r\n        message: 'email already exist to other account',\r\n      },\r\n    };\r\n  } else {\r\n    // increment user id for the next user\r\n    user.id = quickcredit.users.length + 1;\r\n    user.token = generateToken();\r\n    user.status = 'unverfied';\r\n    user.createdOn = new Date();\r\n    user.isAdmin = false;\r\n    // push or add user to an array of users\r\n    quickcredit.users.push(user);\r\n    // response generate\r\n    response = {\r\n      status: 200,\r\n      data: {\r\n        id: user.id,\r\n        token: user.token,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n        password: user.password,\r\n        status: user.status,\r\n        createdOn: user.createdOn,\r\n      },\r\n    };\r\n  }\r\n  res.status(response.status).json(response);\r\n};\r\nexport const login = (req, res) => {\r\n  let response = {};\r\n  const credentials = req.body;\r\n  if (credentials.email === undefined || credentials.password === undefined) {\r\n    response = {\r\n      status: 400,\r\n      data: {\r\n        error: 'Bad request,might be some missing paramaters',\r\n      },\r\n    };\r\n  } else {\r\n    // find user with provided credentials and user is verfiied\r\n    const userInfo = quickcredit.users.find(user => user.email === credentials.email && user.password === credentials.password);\r\n    if (userInfo === undefined) {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: 'No data found, wrong username or password',\r\n        },\r\n      };\r\n    } else if (userInfo.status === 'unverified') {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: 'sorry your account not yet verified,wait for a moment...!',\r\n        },\r\n      };\r\n    } else {\r\n      // login response specifications\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          id: userInfo.id,\r\n          token: userInfo.token,\r\n          firstName: userInfo.firstName,\r\n          lastName: userInfo.lastName,\r\n          email: userInfo.email,\r\n          address: userInfo.address,\r\n          status: userInfo.status,\r\n          isAdmin: userInfo.isAdmin,\r\n          createdOn: userInfo.createdOn,\r\n        },\r\n      };\r\n    }\r\n  }\r\n  res.status(response.status).json(response);\r\n};\r\nexport const toggleVerification = (req, res) => {\r\n  // getting user information from email\r\n  let response = {};\r\n  const userEmail = req.params.email;\r\n  const userInfo = quickcredit.users;\r\n  if (!req.params.email === undefined) {\r\n    response = {\r\n      status: 400,\r\n      data: {\r\n        message: 'Bad request,user email must be defined',\r\n      },\r\n    };\r\n  } else {\r\n  // load userId using account number\r\n    const userIndex = userInfo.findIndex(user => user.email === userEmail);\r\n    if (userIndex === -1) {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: `No data related to ${userEmail} found`,\r\n        },\r\n      };\r\n    } else {\r\n    // updating account based on account index\r\n      userInfo[userIndex].status = 'verified';\r\n      // response object\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          id: userInfo[userIndex].id,\r\n          token: userInfo[userIndex].token,\r\n          firstName: userInfo[userIndex].firstName,\r\n          lastName: userInfo[userIndex].lastName,\r\n          email: userInfo[userIndex].email,\r\n          status: userInfo[userIndex].status,\r\n        },\r\n      };\r\n    }\r\n  }\r\n  res.status(response.status).json(response);\r\n};\r\nexport const resetPassword = (req, res) => {\r\n  // getting user information from url\r\n  let response = {};\r\n  const userParams = req.body;\r\n  const userInfo = quickcredit.users;\r\n  if (!userParams.oldpassword || !userParams.newpassword || !req.params.token) {\r\n    response = {\r\n      status: 400,\r\n      data: {\r\n        message: 'Bad request, there might be some missing parameters',\r\n      },\r\n    };\r\n  } else {\r\n  // load userId using token and password\r\n    const userIndex = userInfo.findIndex(user => (user.token === req.params.token && user.password === userParams.oldpassword));\r\n    if (userIndex === -1) {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: 'No data related to your token found',\r\n        },\r\n      };\r\n    } else if (userInfo[userIndex].status === 'unverified') {\r\n      response = {\r\n        status: 200,\r\n        data: {\r\n          message: 'sorry your account not yet verified, wait for a moment...!',\r\n        },\r\n      };\r\n    } else {\r\n    // updating account based on account index\r\n      userInfo[userIndex].password = userParams.newpassword;\r\n      // response object\r\n      response = {\r\n        status: 200,\r\n        data: userInfo[userIndex],\r\n      };\r\n    }\r\n  }\r\n  res.status(response.status).json(response);\r\n};\r\n"],"file":"Users.js"}